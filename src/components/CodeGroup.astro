---
// src/components/CodeGroup.astro (Redesigned)
import CodeBlock from './CodeBlock.astro'
import type { Props as CodeBlockProps } from './CodeBlock.astro'
import { langMapper } from '@/utils/langMapper'

export interface Props {
    groups: CodeBlockProps[]
}

const { groups } = Astro.props
---

<div class="code-group">
    <div class="tab-bar" role="tablist">
        {
            groups.map(({ lang }, idx) => (
                <button
                    class:list={["tab", { active: idx === 0 }]}
                    role="tab"
                    aria-selected={idx === 0}
                    aria-controls={`panel-${lang}`}
                    data-lang={lang}
                >
                    <span class="icon" data-lang={lang}></span>
                    {langMapper(lang as string)}
                </button>
            ))
        }
        <div class="active-tab-indicator"></div>
    </div>

    <div class="tab-panels">
        {
            groups.map(({ code, lang }, idx) => (
                <div class:list={["tab-panel", { active: idx === 0 }]} role="tabpanel" id={`panel-${lang}`}>
                    <CodeBlock {code} {lang} title={langMapper(lang as string)} />
                </div>
            ))
        }
    </div>
</div>

<script>
    document.querySelectorAll('.code-group').forEach(group => {
        const tabs = group.querySelectorAll('.tab');
        const panels = group.querySelectorAll('.tab-panel');
        const indicator = group.querySelector<HTMLDivElement>('.active-tab-indicator');

        const setActiveTab = (tab) => {
            // Deactivate all
            tabs.forEach(t => t.classList.remove('active'));
            panels.forEach(p => p.classList.remove('active'));

            // Activate selected
            tab.classList.add('active');
            const panelId = tab.getAttribute('aria-controls');
            document.getElementById(panelId)?.classList.add('active');

            // Move indicator
            indicator.style.left = `${tab.offsetLeft}px`;
            indicator.style.width = `${tab.offsetWidth}px`;
        }

        tabs.forEach(tab => {
            tab.addEventListener('click', () => setActiveTab(tab));
        });
        
        // Set initial indicator position
        const initialActiveTab = group.querySelector<HTMLButtonElement>('.tab.active');
        if (initialActiveTab) {
            // Use a timeout to ensure the element has been rendered and has a size
            setTimeout(() => {
                indicator.style.left = `${initialActiveTab.offsetLeft}px`;
                indicator.style.width = `${initialActiveTab.offsetWidth}px`;
                indicator.style.opacity = '1';
            }, 50);
        }
    });
</script>

<style lang="scss">
    /* --- Redesigned CodeGroup Styles --- */
    .code-group {
        margin: 2.5rem 0;
    }

    .tab-bar {
        position: relative;
        display: flex;
        border-bottom: 1px solid var(--code-border-color);
    }

    .tab {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.75rem 1.25rem;
        font-size: 0.9rem;
        font-weight: 500;
        background: none;
        border: none;
        cursor: pointer;
        color: var(--subtle-text-color);
        transition: color 0.3s ease;
        white-space: nowrap;

        .icon {
            width: 18px;
            height: 18px;
            background-repeat: no-repeat;
            background-size: contain;
            background-position: center;
        }

        &:hover {
            color: var(--text-color);
        }

        &.active {
            color: var(--text-color);
        }
    }

    .active-tab-indicator {
        position: absolute;
        bottom: -1px;
        height: 2px;
        background-color: var(--accent-color-dark);
        transition: left 0.3s cubic-bezier(0.25, 0.8, 0.25, 1), width 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
        opacity: 0; // Initially hidden
    }

    .tab-panel {
        display: none;
        &.active {
            display: block;
        }
    }

    // Import language icons from shared styles
    @import url(../styles/iconVars);
    @import url(../styles/datalang);
</style>